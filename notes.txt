
Step 1----------------------------- creating username password basic

after the initial set up the first thing we did was create the ability to make
a new username and password. it was originally placed in lines 34-64.
The problem with it is that it in the data base everything is read as plain
text so if it were ever hacked the person could see everyone's username and pw.

here is the code it took to make it happen

when the person clicks on register it takes them here to make a new user and pw

app.post("/register", function(req, res){
  const newUser = new User({
    email: req.body.username,
    password: req.body.password
  });

this is what saves the user and pw to db via mongoose

  newUser.save(function(err){
    if(err){
      console.log(err);
    } else{
      res.render("secrets");
    }
  });
});


this is the function that serves as a door to let people in or keeps them out
based on if their user and pw match

app.post("/login", function(req, res){
  const username = req.body.username;
  const password = req.body.password;

  User.findOne({email: username}, function(err, foundUser){
    if (err){
      console.log(err);
    }else{
      if (foundUser) {
        if (foundUser.password=== password){
          res.render("secrets");
        }
      }
    }
  });
});

Step 2------------------------------------- encrypting database

we downloaded mongoose-encryption and required it at the top

we changed:
const newUser = new User({
  email: req.body.username,
  password: req.body.password
});

to
const userSchema = new mongoose.Schema ({
  email: String,
  password: String
});

and added

const secret = "thisisourlittlesecret.";
userSchema.plugin(encrypt, {secret:secret, encryptedFields: ["password"]});

the const secret is the key for decryption

it was important to add this before the const User because this allows things
to be encrypted before they are added to the database. the encrypted fields
allows it to just encrypt the just the password instead of everything

this set it up to encrypt when we save (currently line 46the new user and pw
and decrypt when we findOne(line 59)

step 3-----------------------------------------version control safety

this step is designed to protect your files once they go to github or other
version control software. we downloaded the dotenv module in express because
it creates what is called an environment variable. in hyper we created two files
that were hidden. .env and .gitignore.  we also placed

require('dotenv').config();

in the top line. then we moved the const secret = "thisisourlittlesecret."; to
the .env file and changed the coding to

SECRET=thisisourlittlesecret.

it was important to capitalize it and if its multiple words put a _ btwn
them. also removed "" and ; so it knows how to read it properly.

then we went back and changed

userSchema.plugin(encrypt, {secret:secret, encryptedFields: ["password"]});
to
userSchema.plugin(encrypt, {secret: process.env.SECRET, encryptedFields: ["password"]});

this told the code to find the key in the .env file

the purpose of the .gitignore is to keep the .env file hidden. we google
searched git gitignore to find the repository that contained the content to
put in this file. we cliked on node copy and pasted it to ours.

it is important to do this on the first commit so people dont go back and find
the keys in previous versions

step 4--------------------------------------- add hashing

we changed everything from an encrypted system to a hashed system
we removed the const = require(mongoose-encryption) and installed a new
package md5 and made that a const md5 = require("md5");

we removed the plug in

userSchema.plugin(encrypt, {secret: process.env.SECRET, encryptedFields: ["password"]});

we went to the post request for register and login and added md5 so we can
have our website compare hashes

step 5---------------------------------------- adding salting

bcrypt adds salting so it is more secure. we removed md5 and added bcrypt
then created a new const saltRounds =10;

we changed the register route to this

app.post("/register", function(req, res){

  bcrypt.hash(req.body.password, saltRounds, function(err, hash) {
    const newUser = new User({
      email: req.body.username,
      password: hash
    });

and the login route to this

app.post("/login", function(req, res){
  const username = req.body.username;
  const password = req.body.password;

  User.findOne({email: username}, function(err, foundUser){
    if (err){
      console.log(err);
    }else{
      if (foundUser) {
        bcrypt.compare(password, foundUser.password, function(err, result) {
          if (result === true){
            res.render("secrets");
          }
        });
      }
    }
  });
});

step 6-------------------------------------- creating sessions
we removed bcrypt added passport passport local passport local mongoose and
express session (singular not ploral).

we configured passport and session after body parser and before Mongoose.
this is to creat sessions
we will eventually move session to .env to keep secret

passportLocalMongoose is a plugin we add after our user schema  to serialize
and deserialize the users. it was crucial to add it at line 34

passport allows there to be sessions. read back over the code and it should
make sense

we also added a logout route as well she recommended reading the documentation
and rewatching the video

step 7
